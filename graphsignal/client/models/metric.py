# coding: utf-8

"""
    Graphsignal API

    API for uploading and querying spans, errors, metrics, and logs.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from graphsignal.client.models.histogram import Histogram
from graphsignal.client.models.metric_type import MetricType
from graphsignal.client.models.summary import Summary
from graphsignal.client.models.tag import Tag
from typing import Optional, Set
from typing_extensions import Self

class Metric(BaseModel):
    """
    Metric
    """ # noqa: E501
    name: StrictStr = Field(description="The name of the metric.")
    tags: Optional[List[Tag]] = Field(default=None, description="Tags associated with the metric.")
    type: MetricType = Field(description="The type of the metric (gauge, counter, rate, histogram).")
    unit: Optional[StrictStr] = Field(default=None, description="The unit of measurement for the metric.")
    gauge: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The value for gauge type metrics.")
    total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The value for counter type metrics.")
    summary: Optional[Summary] = Field(default=None, description="The value for summary type metrics.")
    histogram: Optional[Histogram] = Field(default=None, description="The histogram data for histogram type metrics.")
    update_ts: StrictInt = Field(description="Unix timestamp (seconds) when the metric was last updated.")
    __properties: ClassVar[List[str]] = ["name", "tags", "type", "unit", "gauge", "total", "summary", "histogram", "update_ts"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Metric from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of summary
        if self.summary:
            _dict['summary'] = self.summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of histogram
        if self.histogram:
            _dict['histogram'] = self.histogram.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Metric from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "tags": [Tag.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "type": obj.get("type"),
            "unit": obj.get("unit"),
            "gauge": obj.get("gauge"),
            "total": obj.get("total"),
            "summary": Summary.from_dict(obj["summary"]) if obj.get("summary") is not None else None,
            "histogram": Histogram.from_dict(obj["histogram"]) if obj.get("histogram") is not None else None,
            "update_ts": obj.get("update_ts")
        })
        return _obj


